Equivalent Left Factored and Removing left Recursion Grammar
Set of Terminal Symbols: ['$', '+', '-', '*', '/', '=', '<', '>', '(', ')', '{', '}', ':=', ';', 'and', 'else', 'end', 'ic', 'id', 'if', 'int', 'do', 'fc', 'float', 'not', 'or', 'print', 'prog', 'scan', 'str', 'then', 'while']
Set of Non-Terminal Symbols: ['AE', 'BE', 'D', 'DL', 'E', 'F', 'ES', 'IOS', 'IS', 'NE', 'P', 'PE', 'RE', 'S', 'SL', 'T', 'TY', 'VL', 'WS', "VL'", "IS'", "RE'", "E'", "T'", "BE'", "AE'", "E''", "T''"]
Rules in the given Grammar: 
P -> [['prog', 'DL', 'SL', 'end']] 
DL -> [['D', 'DL'], ['ε']] 
D -> [['TY', 'VL', ';']] 
TY -> [['int'], ['float']] 
VL -> [['id', "VL'"]] 
SL -> [['S', 'SL'], ['ε']] 
S -> [['ES'], ['IS'], ['WS'], ['IOS']] 
ES -> [['id', ':=', 'E', ';']] 
IS -> [['if', 'BE', 'then', 'SL', "IS'"]] 
WS -> [['while', 'BE', 'do', 'SL', 'end']] 
IOS -> [['print', 'PE'], ['scan', 'id']] 
PE -> [['E'], ['str']] 
BE -> [['AE', "BE'"]] 
AE -> [['NE', "AE'"]] 
NE -> [['not', 'NE'], ['{', 'BE', '}'], ['RE']] 
RE -> [['E', "RE'"]] 
E -> [['T', "E''"]] 
T -> [['F', "T''"]] 
F -> [['(', 'E', ')'], ['id'], ['ic'], ['fc']] 
VL' -> [['id', "VL'"], ['ε']] 
IS' -> [['end'], ['else', 'SL', 'end']] 
RE' -> [['=', 'E'], ['<', 'E'], ['>', 'E']] 
E' -> [['+', 'T'], ['-', 'T']] 
T' -> [['*', 'F'], ['/', 'F']] 
BE' -> [['or', 'AE', "BE'"], ['ε']] 
AE' -> [['and', 'NE', "AE'"], ['ε']] 
E'' -> [["E'", "E''"], ['ε']] 
T'' -> [["T'", "T''"], ['ε']] 
